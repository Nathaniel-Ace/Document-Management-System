version: '3.8'

services:
  dms-server:
    build:
      context: ./backend
    container_name: dms_server
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: "default"
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${SPRING_RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${SPRING_RABBITMQ_PASSWORD}
    volumes:
      - ./logs:/app/logs
    networks:
      - dms-network
    depends_on:
      - database
      - rabbitmq

  frontend:
    build:
      context: ./frontend  # Zeigt auf das Hauptverzeichnis des Frontends
    container_name: frontend_nginx
    ports:
      - "80:80"                 # Exponiert den Port 80 f체r Nginx
    depends_on:
      - dms-server              # Wartet, bis das Backend l채uft
    networks:
      - dms-network
    environment:
      - NODE_ENV=production    # Setze das Produktionsumfeld f체r das Frontend
    restart: always            # Stelle sicher, dass der Container immer wieder neu gestartet wird, falls er ausf채llt


  database:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dms-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # RabbitMQ (Messaging Port)
      - "15672:15672"  # RabbitMQ Management UI
    networks:
      - dms-network

networks:
  dms-network:
    driver: bridge

volumes:
  postgres_data:
